{"version":3,"sources":["Button.js","Score.js","GameOver.js","App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","className","this","props","active","onClick","clickHandler","label","Component","Score","id","score","Gameover","App","state","activeButton","clicks","queue","showGameover","timerId","undefined","delay","handleClick","btnId","console","log","_this","setState","slice","gameover","clearTimeout","next","length","min","max","nextActive","Math","floor","random","q","push","setTimeout","_this2","src_Score_0","src_Button_0","GameOver","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAYgBA,gMAPd,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WAAcC,KAAKC,MAAMC,OAAS,SAAS,IAAQC,QAASH,KAAKC,MAAMG,cAAeJ,KAAKC,MAAMI,cAHhGC,cCQLC,0LANd,OACCX,EAAAC,EAAAC,cAAA,OAAKU,GAAG,mBAAR,WAAmCR,KAAKC,MAAMQ,cAH7BH,cCULI,0LARb,OACCd,EAAAC,EAAAC,cAAA,OAAKU,GAAG,WACRZ,EAAAC,EAAAC,cAAA,OAAKU,GAAG,YAAR,sBAJoBF,kBC8FRK,6MArFfC,MAAQ,CACPC,aAAc,EACdC,OAAQ,EACRC,MAAM,GACNC,cAAc,KAGfC,aAAUC,IACVC,MAAQ,OAERC,YAAc,SAACC,GACdC,QAAQC,IAAI,QAASF,GAChBA,IAAUG,EAAKZ,MAAMG,MAAM,GAKhCS,EAAKC,SAAS,CACbV,MAAOS,EAAKZ,MAAMG,MAAMW,MAAM,GAC9BZ,OAAQU,EAAKZ,MAAME,OAAQ,IAL3BU,EAAKG,cAUPA,SAAU,WACTC,aAAaJ,EAAKP,SAClBO,EAAKC,SAAS,CACbT,cAAc,OAKhBa,KAAM,WAEL,GAAGL,EAAKZ,MAAMG,MAAMe,QAAS,GAE5BN,EAAKG,eAFN,CAMA,IA7CqBI,EAAKC,EA6CtBC,OAAaf,EACjB,GA9CqBa,EA+CM,EA/CDC,EA+CI,EAA7BC,EA9COC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,IAAMA,QA+C7CE,IAAeT,EAAKZ,MAAMC,cAGnC,IAAIwB,EAAIb,EAAKZ,MAAMG,MACnBsB,EAAEC,KAAKL,GAGPT,EAAKC,SAAS,CACbZ,aAAcoB,EACdlB,MAAQsB,IAETf,QAAQC,IAAIC,EAAKZ,MAAMG,OAIvBS,EAAKL,OAAS,IACdK,EAAKP,QAAUsB,WAAWf,EAAKK,KAAML,EAAKL,4FAM1CnB,KAAK6B,wCAEK,IAAAW,EAAAxC,KACP,OACFJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAC2C,EAAD,CAAOhC,MAAQT,KAAKY,MAAME,SAC1BlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZH,EAAAC,EAAAC,cAAC4C,EAAD,CAAQrC,MAAM,IAAIH,OAAqC,IAA5BF,KAAKY,MAAMC,aAAqBT,aAAe,kBAAMoC,EAAKpB,YAAY,MACpGxB,EAAAC,EAAAC,cAAC4C,EAAD,CAAQrC,MAAM,IAAIH,OAAqC,IAA5BF,KAAKY,MAAMC,aAAqBT,aAAe,kBAAMoC,EAAKpB,YAAY,MACjGxB,EAAAC,EAAAC,cAAC4C,EAAD,CAAQrC,MAAM,IAAIH,OAAqC,IAA5BF,KAAKY,MAAMC,aAAqBT,aAAe,kBAAMoC,EAAKpB,YAAY,MAChGpB,KAAKY,MAAMI,cAAgBpB,EAAAC,EAAAC,cAAC6C,EAAD,gBA7EdrC,aCDEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b1329a5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className={ \"button \" + ( this.props.active ? \"active\":\"\" ) }  onClick={this.props.clickHandler}>{this.props.label}</div>\r\n\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\texport default Button;\r\n\t\r\n","import React, {Component} from 'react';\r\nimport './Score.css';\r\n\r\nclass Score extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"score-container\"> Score: {this.props.score}</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\texport default Score;\r\n","import React, {Component} from 'react';\r\nimport './Gameover.css';\r\n\r\nclass Gameover extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"overlay\">\r\n\t\t\t<div id=\"gameover\">Game Over!</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Gameover;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Button from './Button.js';\nimport Score from './Score';\nimport Gameover from './GameOver';\n\nfunction getRandomInt(min, max){\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nclass App extends Component {\nstate = {\n\tactiveButton: 0,\n\tclicks: 0,\n\tqueue:[],\n\tshowGameover: false\n}\n\ntimerId = undefined;\ndelay = 1500;\n\nhandleClick = (btnId) =>{\n\tconsole.log(\"Click\", btnId);\n\tif(!(btnId === this.state.queue[0])){\n\t\t//Gameover\n\t\tthis.gameover();\n\t\treturn\n\t}\n\tthis.setState({\n\t\tqueue: this.state.queue.slice(1),\n\t\tclicks: this.state.clicks +1\n\t});\n}\n\n\ngameover =()=>{\n\tclearTimeout(this.timerId);\n\tthis.setState({\n\t\tshowGameover: true\n\t})\n\treturn\n}\n//when you define a class define methods using arrow functions so that they are automatically bound to the class\nnext =() =>{\n\t// check for gameOver\n\tif(this.state.queue.length >=10 ){\n\t\t//end game\n\t\tthis.gameover();\n\t\treturn\n\t}\n\t// Pick next active button\n\tlet nextActive = undefined;\n\tdo{\n\t\tnextActive = getRandomInt(1, 3);\n\t} while (nextActive === this.state.activeButton);\n\n\n\tlet q = this.state.queue;\n\tq.push(nextActive);\n\t// update active button setState\n\t//using this method you can update all components or classes\n\tthis.setState({\n\t\tactiveButton: nextActive,\n\t\tqueue : q\n\t});\n\tconsole.log(this.state.queue);\n\t// set timer for next activation\n\t//setTimeout(() => this.next(), 1000);\n\t//setTimeout(this.next.bind(this), 1000);\n\tthis.delay *= 0.95;\n\tthis.timerId = setTimeout(this.next, this.delay);\n}\n\n\ncomponentDidMount(){\n\t//this is used to call the function at least once to start the program\n\tthis.next();\n}\n  render() {\n    return (\n\t\t<div className=\"App\">\n\t\t\t<main>\n\t\t\t\t<Score score= {this.state.clicks} />\n\t\t\t\t<div className=\"container\">\n      \t<Button label=\"B\" active={ this.state.activeButton === 1 } clickHandler={ () => this.handleClick(1) }/>\n\t\t\t\t<Button label=\"C\" active={ this.state.activeButton === 2 } clickHandler={ () => this.handleClick(2) }/>\n\t\t\t\t<Button label=\"H\" active={ this.state.activeButton === 3 } clickHandler={ () => this.handleClick(3) }/>\n\t\t\t\t{this.state.showGameover && <Gameover />}\n\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t</div>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}